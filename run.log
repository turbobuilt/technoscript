DEBUG: Program started
DEBUG: Using built-in test program
=== Testing safe unordered list ===
DEBUG: Starting parsing...
DEBUG Parser::parse: Starting parse
DEBUG Parser::parse: Tokenized into 11 tokens
DEBUG Token 0: type=0, value='var'
DEBUG Token 1: type=3, value='x'
DEBUG Token 2: type=8, value='='
DEBUG Token 3: type=7, value='10'
DEBUG Token 4: type=9, value=';'
DEBUG Token 5: type=19, value='print'
DEBUG Token 6: type=10, value='('
DEBUG Token 7: type=3, value='x'
DEBUG Token 8: type=11, value=')'
DEBUG Token 9: type=9, value=';'
DEBUG Token 10: type=34, value=''
DEBUG: Starting iteration 0, pos=0, token=0, value='var'
DEBUG parseStatement: pos=0, token type=0, value='var'
DEBUG parseStatement: parsing VAR
DEBUG parseVarDecl: Adding variable 'x' to function scope at depth 0
DEBUG: Starting iteration 1, pos=5, token=19, value='print'
DEBUG parseStatement: pos=5, token type=19, value='print'
DEBUG: Starting iteration 2, pos=9, token=9, value=';'
DEBUG parseStatement: pos=9, token type=9, value=';'
WARNING: Skipping unexpected token at position 9, type=9, value=';'
DEBUG Parser::parse: Parsing completed successfully
DEBUG: Parsing completed successfully
DEBUG: Starting analysis...
DEBUG Analyzer: Phase 1 - Analyzing classes (inheritance, layout, method closures)...
DEBUG Analyzer: Phase 2 - Single-pass AST analysis...
DEBUG: Setup scope at depth 0 (type: FUNCTION)
DEBUG analyzeNodeSinglePass: Analyzing node type 3 with value 'x'
DEBUG findVariable: Looking for 'x' in scope at depth 0
DEBUG findVariable: Checking scope at depth 0 with 1 variables
DEBUG findVariable:   - Found variable 'x'
DEBUG findVariable: Found 'x' in scope at depth 0
DEBUG: Scope depth 0 has 0 needed scopes
DEBUG pack: Variable 'x' assigned offset 16 (size=16)
DEBUG buildScopeDepthToParentParameterIndexMap: Function 'main' has 0 regular params, needs 0 scopes
DEBUG buildScopeDepthToParentParameterIndexMap: Final mapDEBUG: Completed post-processing for scope at depth 0
DEBUG Analyzer: Analysis completed
DEBUG: Analysis completed successfully
DEBUG: Building class metadata registry...
Building class metadata for 0 classes
DEBUG: Class metadata registry built successfully
DEBUG: Actual print_int64 address: 0x651789193c0c
DEBUG: Starting code generation...
=== Generated Assembly Code ===

=== Initializing Scope Metadata (Compile Time) ===
Initializing scope metadata for all scopes at compile time...
Created scope metadata at compile time with 0 tracked variables
  Created metadata for function: main
Scope metadata initialization complete!

=== First Pass: Generating All Functions ===
Generating 1 functions from registry
Created label for function: main
Generating function from registry: main
Generating prologue for function: main
Main function - allocating scope in prologue
Allocating scope of size: 32 bytes
Main scope allocated
Storing variable 'x' at offset 16 in scope
Loading variable 'x' from current scope at offset 16 with additional offset 0
Loading variable 'x' from current scope at offset 16 with additional offset 8
Generating epilogue for function: main
Generating scope epilogue for scope at depth: 0
Generating AsmLibrary utility functions
Finished generating all functions from registry

=== Second Pass: Generating Main Program ===
Generating program - main should already be generated from registry
Code size after program: 0
Final code size: 779
Successfully generated code, size: 779 bytes

=== Patching Metadata Closures ===
=== Patching Complete ===

=== Disassembled Code ===
0x00007e08797e0040:  push         rbp
0x00007e08797e0041:  mov          rbp, rsp
0x00007e08797e0044:  push         r14
0x00007e08797e0046:  push         r15
0x00007e08797e0048:  xor          r14, r14
0x00007e08797e004b:  xor          r15, r15
0x00007e08797e004e:  push         r14
0x00007e08797e0050:  mov          r14, r15
0x00007e08797e0053:  mov          rdi, 1
0x00007e08797e005a:  mov          rsi, 0x20
0x00007e08797e0061:  movabs       rax, 0x651789179c2a
0x00007e08797e006b:  call         rax
0x00007e08797e006d:  mov          r15, rax
0x00007e08797e0070:  movabs       r11, 0x6517acd01010
0x00007e08797e007a:  mov          qword ptr [r15 + 8], r11
0x00007e08797e007e:  mov          rdi, r15
0x00007e08797e0081:  movabs       r11, 0x6517891ab38a
0x00007e08797e008b:  call         r11
0x00007e08797e008e:  mov          rdi, r15
0x00007e08797e0091:  movabs       r11, 0x6517891ab494
0x00007e08797e009b:  call         r11
0x00007e08797e009e:  movabs       rax, 0x4024000000000000
0x00007e08797e00a8:  mov          rdx, 2
0x00007e08797e00af:  mov          qword ptr [r15 + 0x10], rdx
0x00007e08797e00b3:  mov          qword ptr [r15 + 0x18], rax
0x00007e08797e00b7:  cmp          rdx, 7
0x00007e08797e00bb:  jne          0x7e08797e00da
0x00007e08797e00c1:  mov          rcx, qword ptr [rax + 8]
0x00007e08797e00c5:  test         rcx, 1
0x00007e08797e00cc:  je           0x7e08797e00da
0x00007e08797e00d2:  or           qword ptr [rax + 8], 2
0x00007e08797e00d7:  mfence       
0x00007e08797e00da:  mov          rdi, qword ptr [r15 + 0x10]
0x00007e08797e00de:  mov          rsi, qword ptr [r15 + 0x18]
0x00007e08797e00e2:  sub          rsp, 8
0x00007e08797e00e6:  movabs       rax, 0x651789193c6b
0x00007e08797e00f0:  call         rax
0x00007e08797e00f2:  add          rsp, 8
0x00007e08797e00f6:  mov          eax, 0
0x00007e08797e00fb:  movabs       rax, 0x6517891ab519
0x00007e08797e0105:  call         rax
0x00007e08797e0107:  mov          r15, r14
0x00007e08797e010a:  pop          r14
0x00007e08797e010c:  pop          r15
0x00007e08797e010e:  pop          r14
0x00007e08797e0110:  mov          rsp, rbp
0x00007e08797e0113:  pop          rbp
0x00007e08797e0114:  ret          
0x00007e08797e0115:  mov          r8, qword ptr [rdi + rsi]
0x00007e08797e0119:  mov          rax, qword ptr [r8 + 8]
0x00007e08797e011d:  shl          rax, 2
0x00007e08797e0121:  mov          r9, rax
0x00007e08797e0124:  shl          rax, 3
0x00007e08797e0128:  add          rax, 0x20
0x00007e08797e012c:  push         rdi
0x00007e08797e012d:  push         rsi
0x00007e08797e012e:  push         r8
0x00007e08797e0130:  push         r9
0x00007e08797e0132:  mov          rdi, 1
0x00007e08797e0139:  mov          rsi, rax
0x00007e08797e013c:  movabs       rax, 0x7e08790ae7a0
0x00007e08797e0146:  call         rax
0x00007e08797e0148:  pop          r9
0x00007e08797e014a:  pop          r8
0x00007e08797e014c:  pop          rsi
0x00007e08797e014d:  pop          rdi
0x00007e08797e014e:  mov          r10, rax
0x00007e08797e0151:  mov          rcx, qword ptr [r8]
0x00007e08797e0154:  mov          qword ptr [r10], rcx
0x00007e08797e0157:  mov          qword ptr [r10 + 8], r9
0x00007e08797e015b:  mov          rcx, qword ptr [r8 + 0x10]
0x00007e08797e015f:  mov          qword ptr [r10 + 0x10], rcx
0x00007e08797e0163:  mov          rcx, qword ptr [r8 + 0x18]
0x00007e08797e0167:  mov          qword ptr [r10 + 0x18], rcx
0x00007e08797e016b:  mov          r11, qword ptr [r8 + 0x10]
0x00007e08797e016f:  mov          rcx, r11
0x00007e08797e0172:  test         rcx, rcx
0x00007e08797e0175:  je           0x7e08797e0186
0x00007e08797e017b:  lea          rsi, [r8 + 0x20]
0x00007e08797e017f:  lea          rdi, [r10 + 0x20]
0x00007e08797e0183:  rep movsq    qword ptr [rdi], qword ptr [rsi]
0x00007e08797e0186:  mov          qword ptr [rdi + rsi], r10
0x00007e08797e018a:  push         r10
0x00007e08797e018c:  mov          rdi, r8
0x00007e08797e018f:  movabs       rax, 0x7e08790add30
0x00007e08797e0199:  call         rax
0x00007e08797e019b:  pop          r10
0x00007e08797e019d:  ret          
0x00007e08797e019e:  mov          r8, qword ptr [rdi + rsi]
0x00007e08797e01a2:  mov          rax, 0
0x00007e08797e01a9:  mov          rdx, 1
0x00007e08797e01b0:  lock cmpxchg qword ptr [r8], rdx
0x00007e08797e01b5:  je           0x7e08797e01bf
0x00007e08797e01bb:  pause        
0x00007e08797e01bd:  jmp          0x7e08797e01a2
0x00007e08797e01bf:  mov          r9, 0
0x00007e08797e01c6:  mov          r10, 0
0x00007e08797e01cd:  mov          r11, qword ptr [r8 + 0x10]
0x00007e08797e01d1:  cmp          r10, r11
0x00007e08797e01d4:  jge          0x7e08797e01f5
0x00007e08797e01da:  mov          rax, qword ptr [r8 + r10*8 + 0x20]
0x00007e08797e01df:  test         rax, rax
0x00007e08797e01e2:  je           0x7e08797e01f0
0x00007e08797e01e8:  mov          qword ptr [r8 + r9*8 + 0x20], rax
0x00007e08797e01ed:  inc          r9
0x00007e08797e01f0:  inc          r10
0x00007e08797e01f3:  jmp          0x7e08797e01d1
0x00007e08797e01f5:  mov          qword ptr [r8 + 0x10], r9
0x00007e08797e01f9:  mov          rax, qword ptr [r8 + 8]
0x00007e08797e01fd:  shr          rax, 1
0x00007e08797e0200:  cmp          r9, rax
0x00007e08797e0203:  jge          0x7e08797e029b
0x00007e08797e0209:  mov          rax, r9
0x00007e08797e020c:  shr          rax, 2
0x00007e08797e0210:  add          rax, r9
0x00007e08797e0213:  mov          rcx, 4
0x00007e08797e021a:  cmp          rax, rcx
0x00007e08797e021d:  jge          0x7e08797e0226
0x00007e08797e0223:  mov          rax, rcx
0x00007e08797e0226:  mov          r10, rax
0x00007e08797e0229:  shl          rax, 3
0x00007e08797e022d:  add          rax, 0x20
0x00007e08797e0231:  push         rdi
0x00007e08797e0232:  push         rsi
0x00007e08797e0233:  push         r8
0x00007e08797e0235:  push         r9
0x00007e08797e0237:  push         r10
0x00007e08797e0239:  mov          rdi, 1
0x00007e08797e0240:  mov          rsi, rax
0x00007e08797e0243:  movabs       rax, 0x7e08790ae7a0
0x00007e08797e024d:  call         rax
0x00007e08797e024f:  pop          r10
0x00007e08797e0251:  pop          r9
0x00007e08797e0253:  pop          r8
0x00007e08797e0255:  pop          rsi
0x00007e08797e0256:  pop          rdi
0x00007e08797e0257:  mov          r11, rax
0x00007e08797e025a:  mov          qword ptr [r11], 0
0x00007e08797e0261:  mov          qword ptr [r11 + 8], r10
0x00007e08797e0265:  mov          qword ptr [r11 + 0x10], r9
0x00007e08797e0269:  mov          qword ptr [r11 + 0x18], r9
0x00007e08797e026d:  mov          rcx, r9
0x00007e08797e0270:  test         rcx, rcx
0x00007e08797e0273:  je           0x7e08797e0284
0x00007e08797e0279:  lea          rsi, [r8 + 0x20]
0x00007e08797e027d:  lea          rdi, [r11 + 0x20]
0x00007e08797e0281:  rep movsq    qword ptr [rdi], qword ptr [rsi]
0x00007e08797e0284:  mov          qword ptr [rdi + rsi], r11
0x00007e08797e0288:  push         r11
0x00007e08797e028a:  mov          rdi, r8
0x00007e08797e028d:  movabs       rax, 0x7e08790add30
0x00007e08797e0297:  call         rax
0x00007e08797e0299:  pop          r8
0x00007e08797e029b:  mov          qword ptr [r8], 0
0x00007e08797e02a2:  ret          
0x00007e08797e02a3:  mov          r11, qword ptr [rdi + rsi]
0x00007e08797e02a7:  mov          rax, 0
0x00007e08797e02ae:  mov          rdx, 1
0x00007e08797e02b5:  lock cmpxchg qword ptr [r11], rdx
0x00007e08797e02ba:  je           0x7e08797e02c4
0x00007e08797e02c0:  pause        
0x00007e08797e02c2:  jmp          0x7e08797e02a7
0x00007e08797e02c4:  mov          r10, qword ptr [r11 + 0x10]
0x00007e08797e02c8:  mov          r9, qword ptr [r11 + 8]
0x00007e08797e02cc:  cmp          r10, r9
0x00007e08797e02cf:  jl           0x7e08797e02e4
0x00007e08797e02d5:  push         rdx
0x00007e08797e02d6:  call         0x7e08797e0115
0x00007e08797e02db:  pop          rdx
0x00007e08797e02dc:  mov          r11, qword ptr [rdi + rsi]
0x00007e08797e02e0:  mov          r10, qword ptr [r11 + 0x10]
0x00007e08797e02e4:  mov          qword ptr [r11 + r10*8 + 0x20], rdx
0x00007e08797e02e9:  inc          r10
0x00007e08797e02ec:  mov          qword ptr [r11 + 0x10], r10
0x00007e08797e02f0:  inc          qword ptr [r11 + 0x18]
0x00007e08797e02f4:  mov          qword ptr [r11], 0
0x00007e08797e02fb:  ret          
0x00007e08797e02fc:  mov          r11, qword ptr [rdi + rsi]
0x00007e08797e0300:  mov          rax, 0
0x00007e08797e0307:  mov          rdx, 1
0x00007e08797e030e:  lock cmpxchg qword ptr [r11], rdx
0x00007e08797e0313:  je           0x7e08797e031d
0x00007e08797e0319:  pause        
0x00007e08797e031b:  jmp          0x7e08797e0300
0x00007e08797e031d:  mov          r10, qword ptr [r11 + 0x10]
0x00007e08797e0321:  cmp          rdx, r10
0x00007e08797e0324:  jl           0x7e08797e0336
0x00007e08797e032a:  mov          qword ptr [r11], 0
0x00007e08797e0331:  jmp          0x7e08797e034a
0x00007e08797e0336:  mov          qword ptr [r11 + rdx*8 + 0x20], 0
0x00007e08797e033f:  dec          qword ptr [r11 + 0x18]
0x00007e08797e0343:  mov          qword ptr [r11], 0
0x00007e08797e034a:  ret          
=========================

DEBUG: Code generation completed successfully

=== Running program directly ===

=== Executing Generated Code ===
10
=== Execution Complete (returned 0) ===
=== Program finished ===
